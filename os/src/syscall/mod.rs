//! Implementation of syscalls
//!
//! The single entry point to all system calls, [`syscall()`], is called
//! whenever userspace wishes to perform a system call using the `ecall`
//! instruction. In this case, the processor raises an 'Environment call from
//! U-mode' exception, which is handled as one of the cases in
//! [`crate::trap::trap_handler`].
//!
//! For clarity, each single syscall is implemented as its own function, named
//! `sys_` then the name of the syscall. You can find functions like this in
//! submodules, and you should also implement syscalls this way.


#[derive(FromRepr, Clone, Copy, Debug, Eq, PartialEq)]
#[repr(usize)]
#[allow(non_camel_case_types)]
pub enum SyscallId {
    SYSCALL_IO_GETEVENTS = 4,
    SYSCALL_SETXATTR = 5,
    SYSCALL_LSETXATTR = 6,
    SYSCALL_FSETXATTR = 7,
    SYSCALL_GETXATTR = 8,
    SYSCALL_LGETXATTR = 9,
    SYSCALL_FGETXATTR = 10,
    SYSCALL_LISTXATTR = 11,
    SYSCALL_LLISTXATTR = 12,
    SYSCALL_FLISTXATTR = 13,
    SYSCALL_REMOVEXATTR = 14,
    SYSCALL_LREMOVEXATTR = 15,
    SYSCALL_FREMOVEXATTR = 16,
    SYSCALL_GETCWD = 17,
    SYSCALL_EPOLL_CREATE1 = 20,
    SYSCALL_EPOLL_CTL = 21,
    SYSCALL_EPOLL_PWAIT = 22,
    SYSCALL_DUP = 23,
    SYSCALL_DUP3 = 24,
    SYSCALL_FCNTL = 25,
    SYSCALL_INOTIFY_INIT1 = 26,
    SYSCALL_INOTIFY_ADD_WATCH = 27,
    SYSCALL_INOTIFY_RM_WATCH = 28,
    SYSCALL_IOCTL = 29,
    SYSCALL_IOPRIO_SET = 30,
    SYSCALL_IOPRIO_GET = 31,
    SYSCALL_FLOCK = 32,
    SYSCALL_MKNODAT = 33,
    SYSCALL_MKDIR = 34,
    SYSCALL_UNLINKAT = 35,
    SYSCALL_SYMLINKAT = 36,
    SYSCALL_LINKAT = 37,
    SYSCALL_UMOUNT2 = 39,
    SYSCALL_MOUNT = 40,
    SYSCALL_STATFS = 43,
    SYSCALL_FSTATFS = 44,
    SYSCALL_TRUNCATE = 45,
    SYSCALL_FTRUNCATE = 46,
    SYSCALL_FALLOCATE = 47,
    SYSCALL_FACCESSAT = 48,
    SYSCALL_CHDIR = 49,
    SYSCALL_FCHDIR = 50,
    SYSCALL_CHROOT = 51,
    SYSCALL_FCHMOD = 52,
    SYSCALL_FCHMODAT = 53,
    SYSCALL_FCHOWNAT = 54,
    SYSCALL_FCHOWN = 55,
    SYSCALL_OPENAT = 56,
    SYSCALL_CLOSE = 57,
    SYSCALL_PIPE = 59,
    SYSCALL_GETDENTS = 61,
    SYSCALL_LSEEK = 62,
    SYSCALL_READ = 63,
    SYSCALL_WRITE = 64,
    SYSCALL_READV = 65,
    SYSCALL_WRITEV = 66,
    SYSCALL_PREAD = 67,
    SYSCALL_PWRITE = 68,
    SYSCALL_SENDFILE = 71,
    SYSCALL_PSELECT6 = 72,
    SYSCALL_PPOLL = 73,
    SYSCALL_VMSPLICE = 75,
    SYSCALL_SPLICE = 76,
    SYSCALL_TEE = 77,
    SYSCALL_READLINKAT = 78,
    SYSCALL_FSTATAT = 79,
    SYSCALL_FSTAT = 80,
    SYSCALL_SYNC = 81,
    SYSCALL_FSYNC = 82,
    SYSCALL_FDATASYNC = 83,
    SYSCALL_UTIMENSAT = 88,
    SYSCALL_ACCT = 89,
    SYSCALL_CAPGET = 90,
    SYSCALL_CAPSET = 91,
    SYSCALL_EXIT = 93,
    SYSCALL_EXIT_GROUP = 94,
    SYSCALL_SET_TID_ADDRESS = 96,
    SYSCALL_FUTEX = 98,
    SYSCALL_SET_ROBUST_LIST = 99,
    SYSCALL_GET_ROBUST_LIST = 100,
    SYSCALL_NANOSLEEP = 101,
    SYSCALL_GETITIMER = 102,
    SYSCALL_SETITIMER = 103,
    SYSCALL_DELETE_MODULE = 106,
    SYSCALL_CLOCK_SETTIME = 112,
    SYSCALL_CLOCK_GETTIME = 113,
    SYSCALL_CLOCK_GETRES = 114,
    SYSCALL_CLOCK_NANOSLEEP = 115,
    SYSCALL_SYSLOG = 116,
    SYSCALL_SCHED_SETSCHEDULER = 119,
    SYSCALL_SCHED_GETSCHEDULER = 120,
    SYSCALL_SCHED_GETPARAM = 121,
    SYSCALL_SCHED_SETAFFINITY = 122,
    SYSCALL_SCHED_GETAFFINITY = 123,
    SYSCALL_YIELD = 124,
    SYSCALL_KILL = 129,
    SYSCALL_TKILL = 130,
    SYSCALL_TGKILL = 131,
    SYSCALL_SIGALTSTACK = 132,
    SYSCALL_RT_SIGSUSPEND = 133,
    SYSCALL_RT_SIGACTION = 134,
    SYSCALL_RT_SIGPROCMASK = 135,
    SYSCALL_RT_SIGPENDING = 136,
    SYSCALL_RT_SIGTIMEDWAIT = 137,
    SYSCALL_RT_SIGRETURN = 139,
    SYSCALL_REBOOT = 142,
    SYSCALL_SETREGID = 143,
    SYSCALL_SETGID = 144,
    SYSCALL_SETREUID = 145,
    SYSCALL_SETUID = 146,
    SYSCALL_SETRESUID = 147,
    SYSCALL_SETRESGID = 149,
    SYSCALL_TIMES = 153,
    SYSCALL_SETPGID = 154,
    SYSCALL_GETPGID = 155,
    SYSCALL_SETSID = 157,
    SYSCALL_GETGROUPS = 158,
    SYSCALL_SETGROUPS = 159,
    SYSCALL_UNAME = 160,
    SYSCALL_GETRLIMIT = 163,
    SYSCALL_GETRUSAGE = 165,
    SYSCALL_UMASK = 166,
    SYSCALL_PRCTL = 167,
    SYSCALL_GETTIMEOFDAY = 169,
    SYSCALL_SETTIMEOFDAY = 170,
    SYSCALL_ADJTIMEX = 171,
    SYSCALL_GETPID = 172,
    SYSCALL_GETPPID = 173,
    SYSCALL_GETUID = 174,
    SYSCALL_GETEUID = 175,
    SYSCALL_GETGID = 176,
    SYSCALL_GETEGID = 177,
    SYSCALL_GETTID = 178,
    SYSCALL_SYSINFO = 179,
    SYSCALL_MSGGET = 186,
    SYSCALL_MSGCTL = 187,
    SYSCALL_MSGRCV = 188,
    SYSCALL_MSGSND = 189,
    SYSCALL_SHMGET = 194,
    SYSCALL_SHMCTL = 195,
    SYSCALL_SHMAT = 196,
    SYSCALL_SHMDT = 197,
    SYSCALL_SOCKET = 198,
    SYSCALL_SOCKETPAIR = 199,
    SYSCALL_BIND = 200,
    SYSCALL_LISTEN = 201,
    SYSCALL_ACCEPT = 202,
    SYSCALL_CONNECT = 203,
    SYSCALL_GETSOCKNAME = 204,
    SYSCALL_GETPEERNAME = 205,
    SYSCALL_SENDTO = 206,
    SYSCALL_RECVFROM = 207,
    SYSCALL_SETSOCKOPT = 208,
    SYSCALL_GETSOCKOPT = 209,
    SYSCALL_SHUTDOWN = 210,
    SYSCALL_SENDMSG = 211,
    SYSCALL_RECVMSG = 212,
    SYSCALL_BRK = 214,
    SYSCALL_MUNMAP = 215,
    SYSCALL_MREMAP = 216,
    SYSCALL_ADDKEY = 217,
    SYSCALL_REQUEST_KEY = 218,
    SYSCALL_KEYCTL = 219,
    SYSCALL_CLONE = 220,
    SYSCALL_EXEC = 221,
    SYSCALL_MMAP = 222,
    SYSCALL_FADVISE64 = 223,
    SYSCALL_MPROTECE = 226,
    SYSCALL_MSYNC = 227,
    SYSCALL_MLOCK = 228,
    SYSCALL_MUNLOCK = 229,
    SYSCALL_MLOCKALL = 230,
    SYSCALL_MUNLOCKALL = 231,
    SYSCALL_MINCORE = 232,
    SYSCALL_MADSIVE = 233,
    SYSCALL_GET_MEMPOLICY = 236,
    SYSCALL_WAITPID = 260,
    SYSCALL_PRLIMIT64 = 261,
    SYSCALL_FANOTIFY_INIT = 262,
    SYSCALL_FANOTIFY_MARK = 263,
    SYSCALL_NAME_TO_HANDLE_AT = 264,
    SYSCALL_OPEN_BY_HANDLE_AT = 265,
    SYSCALL_SENDMMSG = 269,
    SYSCALL_KCMP = 272,
    SYSCALL_SCHED_SETATTR = 274,
    SYSCALL_SCHED_GETATTR = 275,
    SYSCALL_RENAMEAT2 = 276,
    SYSCALL_GETRANDOM = 278,
    SYSCALL_BPF = 280,
    SYSCALL_USERFAULTFD = 282,
    SYSCALL_MEMBARRIER = 283,
    SYSCALL_MLOCK2 = 284,
    SYSCALL_COPY_FILE_RANGE = 285,
    SYSCALL_STATX = 291,
    SYSCALL_IO_URING_SETUP = 425,
    SYSCALL_CLONE3 = 435,
    SYSCALL_FACCESSAT2 = 439,
}


pub mod fs;
/// futex
pub mod futex;
pub mod process;
pub mod time;
pub mod signal;
pub mod misc;
pub mod mm;
pub mod io;
/// syscall concerning scheduler
pub mod sche;
/// syscall error code
pub mod sys_error;
/// syscall concerning network
pub mod net;
/// ipc
pub mod ipc;
pub mod reboot;
use alloc::format;
pub use fs::*;
use futex::{sys_futex, sys_get_robust_list, sys_set_robust_list, FUTEX_OWNER_DIED, FUTEX_TID_MASK, FUTEX_WAITERS};
use hal::{addr::VirtAddr, println};
use io::*;
use ipc::sysv::{sys_shmat, sys_shmctl, sys_shmdt, sys_shmget};
use misc::*;
use mm::{sys_mmap, sys_mprotect, sys_mremap, sys_munmap};
use net::*;
pub use process::*;
use strum::FromRepr;
pub use time::*;
pub use signal::*;
pub use sche::*;
pub use reboot::*;
pub use self::sys_error::SysError;
use crate::{fs::RenameFlags, mm::{UserPtr, UserPtrRaw}, signal::{SigAction, SigSet}, task::current_task, timer::ffi::{TimeVal, Tms}, utils::{timer::TimerGuard, SendWrapper}};
/// The result of a syscall, either Ok(return value) or Err(error code)
pub type SysResult = Result<isize, SysError>;

/// handle syscall exception with `syscall_id` and other arguments
pub async fn syscall(syscall_id: usize, args: [usize; 6]) -> isize {
    use SyscallId::*;
    let Some(syscall_id) = SyscallId::from_repr(syscall_id) else {
            log::warn!("Syscall number not included: {syscall_id}");
            return -SysError::ENOSYS.code();
    };

    log::info!("task {}, syscall: {:?}, args: {:x?}", current_task().unwrap().tid() , syscall_id, args);

    let result = match syscall_id { 
        SYSCALL_SETXATTR => sys_temp(syscall_id),
        SYSCALL_LSETXATTR => sys_temp(syscall_id),
        SYSCALL_FSETXATTR => sys_temp(syscall_id),
        SYSCALL_GETXATTR => sys_temp(syscall_id),
        SYSCALL_LGETXATTR => sys_temp(syscall_id),
        SYSCALL_FGETXATTR => sys_temp(syscall_id),
        SYSCALL_LISTXATTR => sys_temp(syscall_id),
        SYSCALL_LLISTXATTR => sys_temp(syscall_id),
        SYSCALL_FLISTXATTR => sys_temp(syscall_id),
        SYSCALL_REMOVEXATTR => sys_temp(syscall_id),
        SYSCALL_LREMOVEXATTR => sys_temp(syscall_id),
        SYSCALL_FREMOVEXATTR => sys_temp(syscall_id),
        SYSCALL_IO_GETEVENTS => sys_temp(syscall_id),
        SYSCALL_GETCWD => sys_getcwd(args[0] as usize, args[1] as usize),
        SYSCALL_EPOLL_CREATE1 => sys_temp(syscall_id),
        SYSCALL_EPOLL_CTL => sys_temp(syscall_id),
        SYSCALL_EPOLL_PWAIT => sys_temp(syscall_id),
        SYSCALL_DUP => sys_dup(args[0] as usize),
        SYSCALL_DUP3 => sys_dup3(args[0] as usize, args[1] as usize, args[2] as u32),
        SYSCALL_INOTIFY_INIT1 => sys_temp(syscall_id),
        SYSCALL_INOTIFY_ADD_WATCH => sys_temp(syscall_id),
        SYSCALL_INOTIFY_RM_WATCH => sys_temp(syscall_id),
        SYSCALL_FCNTL => sys_fnctl(args[0], args[1] as isize, args[2]),
        SYSCALL_IOCTL => sys_ioctl(args[0], args[1], args[2]),
        SYSCALL_IOPRIO_SET => sys_temp(syscall_id),
        SYSCALL_IOPRIO_GET => sys_temp(syscall_id),
        SYSCALL_MKNODAT => sys_temp(syscall_id),
        SYSCALL_FLOCK => sys_temp(syscall_id),
        SYSCALL_OPENAT => sys_openat(args[0] as isize , args[1] as *const u8, args[2] as u32, args[3] as u32),
        SYSCALL_MKDIR => sys_mkdirat(args[0] as isize, args[1] as *const u8, args[2] as usize),
        SYSCALL_UNLINKAT => sys_unlinkat(args[0] as isize, args[1] as *const u8, args[3] as i32),
        SYSCALL_SYMLINKAT => sys_symlinkat(args[0] as *const u8, args[1] as isize, args[2] as *const u8),
        SYSCALL_LINKAT => sys_linkat(args[0] as isize, args[1] as *const u8, args[2] as isize, args[3] as *const u8, args[4] as i32),
        SYSCALL_MOUNT => sys_mount(args[0] as *const u8, args[1] as *const u8, args[2] as *const u8, args[3] as u32, args[4] as usize),
        SYSCALL_STATFS => sys_statfs(args[0], args[1]),
        SYSCALL_FSTATFS => sys_temp(syscall_id),
        SYSCALL_TRUNCATE => sys_temp(syscall_id),
        SYSCALL_FTRUNCATE => sys_ftruncate(args[0], args[1]),
        SYSCALL_FALLOCATE => sys_temp(syscall_id),
        SYSCALL_FACCESSAT => sys_faccessat(args[0] as isize, args[1] as *const u8, args[2], args[3] as i32),
        SYSCALL_UMOUNT2 => sys_umount2(args[0] as *const u8, args[1] as u32),
        SYSCALL_CHDIR => sys_chdir(args[0] as *const u8),
        SYSCALL_FCHDIR => sys_fchdir(args[0]),
        SYSCALL_CHROOT => sys_temp(syscall_id),
        SYSCALL_FCHMOD => sys_fchmod(args[0] as isize, args[1] as u32),
        SYSCALL_FCHMODAT => sys_fchmodat(args[0] as isize, args[1] as *const u8, args[2] as u32, args[3] as i32),
        SYSCALL_FCHOWNAT => sys_fchownat(args[0] as isize, args[1] as *const u8, args[2] as i32, args[3] as i32, args[4] as i32),
        SYSCALL_FCHOWN => sys_fchown(args[0] as isize, args[1] as i32, args[2] as i32),
        SYSCALL_CLOSE => sys_close(args[0]),
        SYSCALL_PIPE => sys_pipe2(args[0] as *mut i32, args[1] as u32),
        SYSCALL_GETDENTS => sys_getdents64(args[0], args[1], args[2]),
        SYSCALL_LSEEK => sys_lseek(args[0], args[1] as isize, args[2]),
        SYSCALL_READ => sys_read(args[0], args[1] , args[2]).await,
        SYSCALL_WRITE => sys_write(args[0], args[1] , args[2]).await,
        SYSCALL_READV => sys_readv(args[0], args[1], args[2]).await,
        SYSCALL_WRITEV => sys_writev(args[0], args[1], args[2]).await,
        SYSCALL_PREAD => sys_pread(args[0], args[1], args[2], args[3]).await,
        SYSCALL_PWRITE => sys_pwrite(args[0], args[1], args[2], args[3]).await,
        SYSCALL_SENDFILE => sys_sendfile(args[0], args[1], args[2], args[3]).await,
        SYSCALL_PPOLL => sys_ppoll(args[0], args[1], args[2], args[3]).await,
        SYSCALL_PSELECT6 => sys_pselect6(args[0] as i32, args[1], args[2], args[3], args[4], args[5]).await,
        SYSCALL_VMSPLICE => sys_temp(syscall_id),
        SYSCALL_SPLICE => sys_temp(syscall_id),
        SYSCALL_TEE => sys_temp(syscall_id),
        SYSCALL_READLINKAT => sys_readlinkat(args[0] as isize, args[1] as *const u8, args[2], args[3]),
        SYSCALL_FSTATAT => sys_fstatat(args[0] as isize, args[1] as *const u8, args[2], args[3] as i32),
        SYSCALL_FSTAT => sys_fstat(args[0], args[1]),
        SYSCALL_UTIMENSAT => sys_utimensat(args[0] as isize, args[1] as *const u8, args[2], args[3] as i32),
        SYSCALL_CAPGET => sys_temp(syscall_id),
        SYSCALL_CAPSET => sys_temp(syscall_id),
        SYSCALL_EXIT => sys_exit(args[0] as i32),
        SYSCALL_SET_TID_ADDRESS => sys_set_tid_address(args[0]),
        SYSCALL_EXIT_GROUP => sys_exit_group(args[0] as i32),
        SYSCALL_FUTEX => sys_futex(args[0], args[1] as _, args[2] as _, SendWrapper(args[3] as _), args[4], args[5] as _).await,
        SYSCALL_SET_ROBUST_LIST => sys_set_robust_list(args[0] as _, args[1]),
        SYSCALL_GET_ROBUST_LIST => sys_get_robust_list(args[0] as _, args[1] as _, args[2] as _),
        SYSCALL_DELETE_MODULE => sys_temp(syscall_id),
        SYSCALL_NANOSLEEP => sys_nanosleep(args[0].into(),args[1].into()).await,
        SYSCALL_GETITIMER => sys_getitimer(args[0], args[1]),
        SYSCALL_SETITIMER => sys_setitimer(args[0],args[1],args[2]),
        SYSCALL_CLOCK_SETTIME => sys_clock_settime(args[0], args[1]),
        SYSCALL_CLOCK_GETTIME => sys_clock_gettime(args[0], args[1]),
        SYSCALL_CLOCK_GETRES => sys_clock_getres(args[0], args[1]),
        SYSCALL_CLOCK_NANOSLEEP => sys_clock_nanosleep(args[0], args[1], args[2], args[3]).await,
        SYSCALL_SYSLOG => sys_syslog(args[0], args[1], args[2]),
        SYSCALL_SCHED_SETAFFINITY => sys_sched_setaffinity(args[0] , args[1] , args[2] ),
        SYSCALL_SCHED_GETAFFINITY => sys_sched_getaffinity(args[0] , args[1] , args[2] ),
        SYSCALL_SCHED_GETSCHEDULER => sys_sched_getscheduler(),
        SYSCALL_SCHED_SETSCHEDULER => sys_sched_setscheduler(),
        SYSCALL_SCHED_GETPARAM => sys_sched_getparam(),
        SYSCALL_YIELD => sys_yield().await,
        SYSCALL_KILL => sys_kill(args[0] as isize, args[1] as i32),
        SYSCALL_TKILL => sys_tkill(args[0] as isize, args[1] as i32),
        SYSCALL_TGKILL => sys_tgkill( args[0] as isize, args[1] as isize, args[2] as i32),
        SYSCALL_SIGALTSTACK => sys_temp(syscall_id),
        SYSCALL_RT_SIGSUSPEND => sys_rt_sigsuspend(args[0]).await,
        SYSCALL_RT_SIGACTION => sys_rt_sigaction(args[0] as i32, args[1] as *const SigAction, args[2] as *mut SigAction),
        SYSCALL_RT_SIGPROCMASK => sys_rt_sigprocmask(args[0] as i32, args[1] as *const u32, args[2] as *mut SigSet),
        SYSCALL_RT_SIGPENDING => sys_rt_sigpending(args[0] as *mut SigSet),
        SYSCALL_RT_SIGRETURN => sys_rt_sigreturn(),
        SYSCALL_RT_SIGTIMEDWAIT => sys_rt_sigtimedwait(args[0] , args[1] , args[2] ).await,
        SYSCALL_REBOOT => sys_reboot(args[0] as _, args[0] as _, args[0] as _, args[0]).await,
        SYSCALL_SETRESUID => sys_temp(syscall_id),
        SYSCALL_SETRESGID => sys_temp(syscall_id),
        SYSCALL_TIMES => sys_times(args[0]),
        SYSCALL_UNAME => sys_uname(args[0]),
        SYSCALL_UMASK => sys_umask(args[0] as i32),
        SYSCALL_PRCTL => sys_temp(syscall_id),
        SYSCALL_GETTIMEOFDAY => sys_gettimeofday(args[0]),
        SYSCALL_SETTIMEOFDAY => sys_temp(syscall_id),
        SYSCALL_GETPID => sys_getpid(),
        SYSCALL_GETPPID => sys_getppid(),
        SYSCALL_GETUID => sys_getuid(),
        SYSCALL_GETEUID => sys_geteuid(),
        SYSCALL_GETGID => sys_temp(syscall_id),
        SYSCALL_GETEGID => sys_getegid(),
        SYSCALL_GETTID => sys_gettid(),
        SYSCALL_SETSID => sys_setsid(),
        SYSCALL_GETGROUPS => sys_temp(syscall_id),
        SYSCALL_SETGROUPS => sys_temp(syscall_id),
        SYSCALL_SYSINFO => sys_sysinfo(args[0]),
        SYSCALL_MSGGET => sys_temp(syscall_id),
        SYSCALL_MSGCTL => sys_temp(syscall_id),
        SYSCALL_MSGRCV => sys_temp(syscall_id),
        SYSCALL_MSGSND =>sys_temp(syscall_id),
        SYSCALL_SHMGET => sys_shmget(args[0] as _, args[1] as _, args[2] as _),
        SYSCALL_SHMCTL => sys_shmctl(args[0] as _, args[1] as _, UserPtrRaw::new(args[2] as *mut _)),
        SYSCALL_SHMAT => sys_shmat(args[0] as _, VirtAddr::from(args[1]), args[2] as _),
        SYSCALL_SHMDT => sys_shmdt(VirtAddr::from(args[0])),
        SYSCALL_SETPGID => sys_setpgid(args[0], args[1]),
        SYSCALL_GETPGID => sys_getpgid(args[0]),
        SYSCALL_CLONE => sys_clone(args[0] as u64, args[1].into(), args[2].into(), args[3].into(), args[4].into()),
        SYSCALL_CLONE3 => sys_clone3(args[0], args[1]),
        SYSCALL_WAITPID => sys_waitpid(args[0] as isize, args[1], args[2] as i32).await,
        SYSCALL_PRLIMIT64 => sys_prlimit64(args[0], args[1] as i32, args[2], args[3]),
        SYSCALL_GETRUSAGE => sys_getrusage(args[0] as i32, args[1]),
        SYSCALL_EXEC => sys_execve(args[0] , args[1], args[2]).await,
        SYSCALL_BRK => sys_brk(VirtAddr::from(args[0])),
        SYSCALL_MUNMAP => sys_munmap(VirtAddr::from(args[0]), args[1]),
        SYSCALL_MMAP => sys_mmap(VirtAddr::from(args[0]), args[1], args[2] as i32, args[3] as i32, args[4], args[5]),
        SYSCALL_FADVISE64 => sys_temp(syscall_id),
        SYSCALL_MREMAP => sys_mremap(VirtAddr::from(args[0]), args[1], args[2], args[3] as i32, args[4]),
        SYSCALL_FANOTIFY_INIT => sys_temp(syscall_id),
        SYSCALL_FANOTIFY_MARK => sys_temp(syscall_id),
        SYSCALL_NAME_TO_HANDLE_AT => sys_temp(syscall_id),
        SYSCALL_OPEN_BY_HANDLE_AT => sys_temp(syscall_id),
        SYSCALL_SENDMMSG => sys_temp(syscall_id),
        SYSCALL_KCMP => sys_temp(syscall_id),
        SYSCALL_SCHED_GETATTR => sys_temp(syscall_id),
        SYSCALL_SCHED_SETATTR => sys_temp(syscall_id),
        SYSCALL_RENAMEAT2 => sys_renameat2(args[0] as isize, args[1] as *const u8, args[2] as isize, args[3] as *const u8, args[4] as i32),
        SYSCALL_GETRANDOM => sys_getrandom(args[0], args[1], args[2]),
        SYSCALL_GETRLIMIT => sys_temp(syscall_id),
        SYSCALL_STATX => sys_statx(args[0] as _, args[1] as _, args[2] as _, args[3] as _, args[4].into()),
        SYSCALL_SOCKET => sys_socket(args[0], args[1] as i32, args[2]),
        SYSCALL_SOCKETPAIR => sys_socketpair(args[0], args[1],  args[2], args[3]),
        SYSCALL_BIND => sys_bind(args[0], args[1], args[2]),
        SYSCALL_LISTEN => sys_listen(args[0], args[1]),
        SYSCALL_ACCEPT => sys_accept(args[0], args[1], args[2]).await,
        SYSCALL_CONNECT => sys_connect(args[0], args[1], args[2]).await,
        SYSCALL_GETSOCKNAME => sys_getsockname(args[0], args[1], args[2]),
        SYSCALL_GETPEERNAME => sys_getpeername(args[0], args[1], args[2]),
        SYSCALL_SENDTO => sys_sendto(args[0], args[1] ,  args[2], args[3], args[4], args[5]).await,
        SYSCALL_RECVFROM => sys_recvfrom(args[0], args[1] , args[2], args[3], args[4], args[5]).await,
        SYSCALL_SETSOCKOPT => sys_setsockopt(args[0], args[1], args[2], args[3], args[4]),
        SYSCALL_GETSOCKOPT => sys_getsockopt(args[0], args[1], args[2], args[3], args[4]),
        SYSCALL_SHUTDOWN => sys_shutdown(args[0],  args[1]),
        SYSCALL_SENDMSG => sys_sendmsg(args[0], args[1], args[2]).await,
        SYSCALL_RECVMSG => sys_recvmsg(args[0], args[1], args[2]).await,
        SYSCALL_MPROTECE => sys_mprotect(args[0].into(), args[1], args[2] as _),
        SYSCALL_MUNLOCK => sys_temp(syscall_id),
        SYSCALL_MLOCKALL => sys_temp(syscall_id),
        SYSCALL_MUNLOCKALL => sys_temp(syscall_id),
        SYSCALL_MINCORE => sys_temp(syscall_id),
        SYSCALL_MADSIVE =>  sys_temp(syscall_id),
        SYSCALL_GET_MEMPOLICY => sys_temp(syscall_id),
        SYSCALL_SYNC => sys_temp(syscall_id),
        SYSCALL_FSYNC => sys_temp(syscall_id),
        SYSCALL_FDATASYNC => sys_fdatasync(args[0]),
        SYSCALL_MSYNC => sys_temp(syscall_id),
        SYSCALL_MLOCK => sys_temp(syscall_id),
        SYSCALL_MEMBARRIER => sys_temp(syscall_id),
        SYSCALL_MLOCK2 => sys_temp(syscall_id),
        SYSCALL_COPY_FILE_RANGE => sys_temp(syscall_id),
        SYSCALL_IO_URING_SETUP => sys_temp(syscall_id),
        SYSCALL_SETREGID => sys_temp(syscall_id),
        SYSCALL_SETGID => sys_temp(syscall_id),
        SYSCALL_SETREUID => sys_temp(syscall_id),
        SYSCALL_SETUID => sys_temp(syscall_id),
        SYSCALL_ADDKEY => sys_temp(syscall_id),
        SYSCALL_REQUEST_KEY => sys_temp(syscall_id),
        SYSCALL_KEYCTL => sys_temp(syscall_id),
        SYSCALL_ACCT => sys_temp(syscall_id),
        SYSCALL_ADJTIMEX => sys_temp(syscall_id),
        SYSCALL_BPF => sys_temp(syscall_id),
        SYSCALL_USERFAULTFD => sys_temp(syscall_id),
        SYSCALL_FACCESSAT2 => sys_faccessat2(args[0] as isize, args[1] as *const u8, args[2] as i32, args[3] as i32),
        /* 
        _ => { 
            log::warn!("Unsupported syscall_id: {:?}", syscall_id);
            Err(SysError::ENOSYS)
        }
        */
    };
    match result {
        Ok(ret ) => {
            ret
        }
        Err(err) => {
            -err.code() 
        }
    }
}

/// do nothing
pub fn sys_temp(syscall_id: SyscallId) -> SysResult {
    log::warn!("[sys_temp]: syscall {:?} unimplement", syscall_id);
    Ok(0)
}
